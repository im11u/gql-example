package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/im11u/gql-example/go/domain"
	"github.com/im11u/gql-example/go/infrastructure/graph/gen"
)

// Employees is the resolver for the employees field.
func (r *departmentResolver) Employees(ctx context.Context, obj *domain.Department) ([]*domain.Employee, error) {
	panic(fmt.Errorf("not implemented: Employees - employees"))
}

// Department is the resolver for the department field.
func (r *employeeResolver) Department(ctx context.Context, obj *domain.Employee) (*domain.Department, error) {
	panic(fmt.Errorf("not implemented: Department - department"))
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context) ([]*domain.Department, error) {
	return r.departmentAction.FindAll()
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*domain.Employee, error) {
	return r.employeeAction.FindAll()
}

// Department returns gen.DepartmentResolver implementation.
func (r *Resolver) Department() gen.DepartmentResolver { return &departmentResolver{r} }

// Employee returns gen.EmployeeResolver implementation.
func (r *Resolver) Employee() gen.EmployeeResolver { return &employeeResolver{r} }

// Query returns gen.QueryResolver implementation.
func (r *Resolver) Query() gen.QueryResolver { return &queryResolver{r} }

type departmentResolver struct{ *Resolver }
type employeeResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
